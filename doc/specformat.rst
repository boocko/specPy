.. @(#)specformat.rst	6.1  08/01/12  CSS
.. Copyright (c) 1990,1991,1992,1994,1995,2015 Certified Scientific Software
..
.. versioninfo: "specformat.rst" "" "15/03/15" "specformat.rst 6.1  15/03/15 CSS"

=================
**specformat**
=================

-------------------------------
format of **spec** data files
-------------------------------

DESCRIPTION
===========

The **spec** data file format is the current standard used
by **spec** to save data during scans. The **spec** data format 
is a pure ASCII data format. It defines a modest
set of conventions to write/read multiple sets of data 
and associated metadata in files. 

TOOLS
========
A number of tools exist supporting this format. 

``splot``
    ``splot`` is one of the standard **spec** plotting tools.  ``splot`` can be
    used standalone to display and manipulate data from data files offline.

    ``splot`` is distributed together with the **spec** software package. 

``C-PLOT``
    Within the ``C-PLOT`` software package the ``scans.4`` extension function
    allows to load data from **spec** data files for plotting and printing.
    ``C-PLOT`` includes 
    Check the documentation for ``C-PLOT`` in the official Certified Scientific 
    Software website. http://www.certif.com/ 
    The documentation for the ``scans.4`` is found at 
    http://www.certif.com/cplot_help/scans.4
    
    To obtain a license for ``C-PLOT`` you should contact Certified Scientific
    Software as explained in the contact page in http://www.certif.com/contact/

``specfile`` tool and `filespec` python module
    ``specfile`` is a command line tool distributed with the ``specPy`` python
    package. http://github.com/certified-spec/specPy

    ``specfile`` tool can list scans in file and extract scans to separate lines
    providing **spec** data format or other file output formats

    The `filespec` python module provides functionality to load scan data  and their
    metadata so that it can be included in python scripts and applications.

    The `specPy` python package is distributed free of charge.


`PyMca`
    `PyMca` is a sophisticated scientific data and analysis tool developed by the 
    ESRF. Between other data formats `PyMca` includes support for the 
    **spec** data file format.
    PyMca documentation and download instructions can be found in
    http://pymca.sourceforge.net/

FILE CONVENTIONS
===================

The scan files contain control lines, data lines and blank lines.
Control lines contain a ``#`` character in the first column followed 
by a command word.

Data lines generally contain a row of numbers.

Special data lines containing MCA data begin with an ``@``
character followed by a row of numbers.

Lines are organized in two type of blocks: file blocks and scan blocks.

Example
------------
A very simple file might look like: ::

          #F 31oct98.dat
          #E 909799770
          #D Sat Oct 31 12:12:20 1998
          #C spectro  User = opid26
          #O0      Theta       Chi       Phi        
          #o0 th chi phi
          #J0 Seconds  Monitor  Detector
          #j0 sec mon det 

          #S 1
          #D Sat Oct 31 12:13:11 1998
          #T 1  (Seconds)
          #P0 12.45 90 45
          #N 3
          #L Temperature  Voltage  Counts
          23.4 1.01 30456
          23.6 1.015 24000

          #S 2
	  etc.


File blocks are determined by ``#F`` or ``#E`` control line 
A file block is tipycally included as the first block
in a file but it could also appear somewhere else inside the file. 
The information in a file block concerns all the scan blocks
in the file or all the scans until a new file block is found.

File blocks
--------------
The following control lines can be found in a file block:

``#F *filename*``
     indicates the name of the file 

``#E *epoch*``
     indicates the unix epoch at the creation of the file (or file block)
     the exact time for a data point can be determined from its epoch column
     (if present) by adding it to this file epoch

``#D *datetime*``
     indicates the date and time corresponding to the creation of this file 
     (or this file block)

``#C *comment*``
     includes a comment line. 
     A comment line often found in a file block (generated by the **spec** program)
     includes the name of the application that created the file and the unix 
     username that was used when the file was created. Like in::
         #C fourc  User = opid56 

``#O%d *motor name*``
     indicates the name of the motors in the **spec** application when the file was
     created. 
     A ``#O`` can contain up to 8 motor names
     Th ``O``  in ``#O`` is followed by a number indicating the line number.  This
     numbering and the position of the motor in the line allows to match motor names 
     with motor positions (see ``#P`` control lines in scan blocks below).
     To allow for motor names including white spaces, the delimiter for motor names 
     in ``#O`` lines is a set of two blank spaces. 
     Example::
         #O0 Two Theta  Theta  Chi  Phi  Height  X Tilt  PTY  PSlit Up
         #O1 PSlit Down  PSlit Off  PSlit Gap  

``#o%d *motor mnemonic*``
     indicates the mnemonic of the motors in the **spec** application when the file was
     created. 
     As with ``#O``  lines a ``#o`` can contain up to 8 motor mnemonics.
     Th ``o``  in ``#o`` is followed by a number indicating the line number.  This
     A motor mnemonic can not contain blank spaces. The delimiter between motor mnemonics
     in a line is a single blank space.
     Example::
         #o0 tth th chi phi hgt xti pty psu
         #o1 psd pso psg 

``#J%d *counter name*``
     indicates the name of the counters in the **spec** application when the file was
     created. 
     A ``#J`` can contain up to 8 counter names
     Th ``J``  in ``#J`` is followed by a number indicating the line number.  
     To allow for counter names including white spaces, the delimiter for counter names 
     in ``#J`` lines is a set of two blank spaces. 

``#j%d *counter mnemonic*``
     indicates the mnemonic of the counters in the **spec** application when the file was
     created. 
     A counter mnemonic can not contain blank spaces. The delimiter between counter mnemonics
     in a line is a single blank space.

Scan blocks
--------------
Scan blocks are started by the ``#S`` notation in a control line.
Scan numbers are determined by the ``#S`` lines in the file.  
The file position number is the sequence position
of the scan in the file, irrespective of scan number.
Several scans with the same number can exist in a file. 


``#S *N*``
     starts a new scan.
     Here, ``*N*`` is the user's numbering scheme. It is not the position of 
     the scan in the file referred often as the scan index.
     Most often the scan number and the scan index coincides.

``#M *N*``
     indicates data was taken counting to ``*number*`` monitor counts.

``#T *N*``
     indicates data was taken counting for ``*N*`` seconds.

``#N *N* [*M*]``
     indicates there are ``*N*`` columns of data.
     If ``*M*`` is present, it indicates there are
     ``*M*`` sets of data columns on each line.

     When collecting data from a multi-channel analyzer, for example,
     the data might be arranged with 16 points per line in the file to make
     the file easier to scan by eye.

     In such a case, the control line would be ``#N 1 16``.

``#I *N*``
     is for an optional multiplicative intensity-normalization factor.

``#@MCA *format-of-mca-data-lines``
     indicates the scan contains MCA data.
     Data in the lines (specila data line) starting with ``@A``
     will contain the MCA data.

     Optionally the ``#@MCA``` can be followed by a notation indicating the format
     of MCA data lines. In the following example: ::
        #@MCA %16C
     the format indicates that MCA data lines will contain 16 columns of data followed
     by a continuation character (the ``\`` character).

``#@CALIB *a b c*``
     gives calibration factors for MCA data.
     Calibration factors can be changed within the data portion of a scan for
     subsequent MCA data by the line::

	  ``@CALIB *a b c*``

``#C``
     is a comment line.

``#D``
     is followed by the date and time the scan was taken.

``#L *label1  label2*``
     is the data-column labels. Labels can contain blank spaces. The 
     delimiteer between labels is a set of two blank spaces.

``#Q *H* *K* *L*``
     in a diffractometer is used this line contains the *H* *K* and *L* values
     at the moment the scan was started

``#G%d *geometry content*``
     is a geometry line. contains information used for diffractometer geometry
     calculation.  Several geometry lines can appear in a scan block. Geometry lines 
     are numbered

``#U``
    is a user-defined line. Content and format is free for user usage.

